{"mappings":"4hBAEA,MAAMA,EAAqB,WACrBC,EAAO,qBACPC,EAAQ,4BACRC,EAAY,YACZC,EAAmB,eACnBC,EAAQ,kDACRC,EAAQ,eAEDC,EAA+BC,GAC1CA,EAAQ,KAAO,kCAcJC,EACVC,GACAF,IACkBA,GAASA,EAAME,QAAUA,EAGtC,KAAI,+CACHA,IAGIC,EACVD,GACAF,IACkBA,GAASA,EAAME,QAAUA,EAGtC,KAAI,gDACHA,IAoCIE,EAAkB,CAC7BL,EACAE,EAAkB,GAClBE,EAAkB,IApC2BH,IAC5BA,GAASN,EAASW,KAAKL,GAGpC,KACA,gFAmCOM,EAAiB,CAC5BP,EAzEoDC,IACnCA,GAASR,EAAsBa,KAAKL,EAAMO,OAAO,IAEjD,KAAO,qCAGoBP,IAC3BA,GAASP,EAAQY,KAAKL,GAEtB,KAAO,sCAqEbQ,EAAqB,CAChCT,EACAE,EAAkB,GAClBE,EAAkB,IAzC8BH,IAChD,MAAMS,EAAYd,EAAaU,KAAKL,GAC9BU,EAAmBd,EAAoBS,KAAKL,GAElD,OAAIA,IAAUS,EAAkB,2CAC5BT,IAAUU,EACL,qDAEF,OCjDHC,EAAgB,CACpBC,gBAAgB,GAGZC,EAAe,CACnBC,MAAO,CACLC,KAAM,QACNC,MAAO,QACFC,KAAC,QACNC,WD6E2B,CAACnB,EAlCSC,IACtBA,GAASH,EAASQ,KAAKL,GAEvB,KAAO,4CC5CxBmB,MAAO,CACLJ,KAAM,OACNC,MAAO,QACFC,KAAC,QACNC,WAAYd,GAEdgB,WAAY,CACVL,KAAM,OACNC,MAAO,MACJC,KAAG,aACNC,WAAYZ,GAEde,YAAa,CACXN,KAAM,OACNC,MAAO,UACAC,KAAD,cACNC,WAAYZ,GAEdgB,MAAO,CACLP,KAAM,OACNC,MAAO,UACAC,KAAD,QACNC,WDuD2B,CAC7BnB,EACAE,EAAkB,IAClBE,EAAkB,IAjC2BH,IAC5BA,GAASF,EAASO,KAAKL,GAGpC,KAAI,qEC3BRuB,SAAU,CACRR,KAAM,WACNC,MAAO,SACDC,KAAA,WACNC,WAAYV,GAEdgB,gBAAiB,CACfT,KAAM,WACNC,MAAO,mBACKC,KAAN,kBACNC,WAAYV,IAeViB,EAAS,CAXI,IAAIC,EAAAC,QAAWd,EAAaC,MAAOH,GACnC,IAAIe,EAAAC,QAAWd,EAAaM,MAAOR,GAC/B,IAAIe,EAAAC,QAAWd,EAAaO,WAAYT,GACvC,IAAIe,EAAAC,QAAWd,EAAaQ,YAAaV,GAC9C,IAAIe,EAAAC,QAAWd,EAAaS,MAAOX,GAChC,IAAIe,EAAAC,QAAWd,EAAaU,SAAUZ,GAChC,IAAIe,EAAAC,QAC9Bd,EAAaW,gBACbb,IAsCIiB,EAAS,IAAIC,EAAAF,QAAO,CAAEG,KAAM,qBAAwCf,KAAM,WAC1EgB,EAAO,IAAIF,EAAAF,QACf,CAAEG,KAAM,QAAcE,KAAM,UACvB,CAAHC,UAAW,eAGTC,EAAuB,CAC3BjB,KAAM,qBACNQ,SACAG,OACAG,EACAI,OAAQ,CACNC,OArCqBC,IACvBA,EAAEC,iBAEF,MAAMC,EAAS,GAETC,EAAWf,EAAOgB,QAAM,CAAEC,EAAMC,KACpCA,EAAMC,WAEFD,EAAME,MAAMC,WACdP,EAAOQ,KAAK,CACV9B,KAAM0B,EAAME,MAAM5B,KAClBjB,MAAO2C,EAAM3C,MACbgD,MAAOL,EAAME,MAAMC,YAIhB,IACFJ,MACCC,EAAME,MAAM5B,QAAS0B,EAAM3C,SAEhC,IAEHiD,QAAQC,IAAIV,MAmBRW,EAAY,IAAIC,EAAAzB,QAASO,GAE/BmB,EAAA1B,QAAO,OAAQwB","sources":["src/utils/validators.ts","src/pages/SignIn/SignIn.ts"],"sourcesContent":["export type Validator = (value: string) => string | null;\n\nconst firstLetterCapitalReg = /[А-ЯA-Z]/;\nconst nameReg = /^[а-яА-Яa-zA-Z-]+$/;\nconst loginReg = /(?!^\\d+$)^[a-zA-Z\\d\\-_]+$/;\nconst hasNumberReg = /.*[0-9].*/;\nconst hasCapitalLetterReg = /.*[А-ЯA-Z].*/;\nconst emailReg = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\nconst phoneReg = /^[\\d+][\\d]+$/;\n\nexport const validateRequired: Validator = (value) =>\n  value ? null : \"Поле обязательно для заполнения\";\n\nexport const validateFirstLetterCapital: Validator = (value) => {\n  const isValid = !value || firstLetterCapitalReg.test(value.charAt(0));\n\n  return isValid ? null : \"Первая буква должна быть заглавной\";\n};\n\nexport const validateNameString: Validator = (value) => {\n  const isValid = !value || nameReg.test(value);\n\n  return isValid ? null : \"Поле может содержать буквы и дефис\";\n};\n\nexport const validateMinLength =\n  (length: number): Validator =>\n  (value) => {\n    const isValid = !value || value.length >= length;\n\n    return isValid\n      ? null\n      : `Кол-во символов должно быть по меньшей мере ${length}`;\n  };\n\nexport const validateMaxLength =\n  (length: number): Validator =>\n  (value) => {\n    const isValid = !value || value.length <= length;\n\n    return isValid\n      ? null\n      : `Кол-во символов должно быть меньше или равно ${length}`;\n  };\n\nexport const validateLoginString: Validator = (value) => {\n  const isValid = !value || loginReg.test(value);\n\n  return isValid\n    ? null\n    : \"Поле может содержать буквы латинского алфавита, дефис и нижнее подчеркивание\";\n};\n\nexport const validatePasswordString: Validator = (value) => {\n  const hasNumber = hasNumberReg.test(value);\n  const hasCapitalLetter = hasCapitalLetterReg.test(value);\n\n  if (value && !hasNumber) return \"Поле должно содержать хотя бы одну цифру\";\n  if (value && !hasCapitalLetter)\n    return \"Поле должно содержать хотя бы одну заглавную букву\";\n\n  return null;\n};\n\nexport const validateEmail: Validator = (value) => {\n  const isValid = !value || emailReg.test(value);\n\n  return isValid ? null : \"Введите имейл в формате common@mail.com\";\n};\n\nexport const validatePhoneString: Validator = (value) => {\n  const isValid = !value || phoneReg.test(value);\n\n  return isValid\n    ? null\n    : `Поле должно содержать только цифр, может начинаться со знака \"+\"`;\n};\n\nexport const loginValidators = [\n  validateRequired,\n  validateMinLength(3),\n  validateMaxLength(20),\n  validateLoginString,\n];\n\nexport const nameValidators = [\n  validateRequired,\n  validateFirstLetterCapital,\n  validateNameString,\n];\n\nexport const passwordValidators = [\n  validateRequired,\n  validateMinLength(8),\n  validateMaxLength(40),\n  validatePasswordString,\n];\n\nexport const emailValidators = [validateRequired, validateEmail];\n\nexport const phoneValidators = [\n  validateRequired,\n  validateMinLength(10),\n  validateMaxLength(15),\n  validatePhoneString,\n];\n","import AuthPage, { AuthPageProps } from \"../../views/AuthPage\";\nimport render from \"../../utils/render\";\nimport InputField from \"../../ui/InputField\";\nimport Button from \"../../ui/Button\";\nimport {\n  loginValidators,\n  nameValidators,\n  passwordValidators,\n  emailValidators,\n  phoneValidators,\n} from \"../../utils/validators\";\n\nconst inputSettings = {\n  withInternalID: true,\n};\n\nconst FIELDS_PROPS = {\n  EMAIL: {\n    type: \"email\",\n    label: \"Почта\",\n    name: \"email\",\n    validators: emailValidators,\n  },\n  LOGIN: {\n    type: \"text\",\n    label: \"Логин\",\n    name: \"login\",\n    validators: loginValidators,\n  },\n  FIRST_NAME: {\n    type: \"text\",\n    label: \"Имя\",\n    name: \"first_name\",\n    validators: nameValidators,\n  },\n  SECOND_NAME: {\n    type: \"text\",\n    label: \"Фамилия\",\n    name: \"second_name\",\n    validators: nameValidators,\n  },\n  PHONE: {\n    type: \"text\",\n    label: \"Телефон\",\n    name: \"phone\",\n    validators: phoneValidators,\n  },\n  PASSWORD: {\n    type: \"password\",\n    label: \"Пароль\",\n    name: \"password\",\n    validators: passwordValidators,\n  },\n  PASSWORD_SECOND: {\n    type: \"password\",\n    label: \"Пароль (ещё раз)\",\n    name: \"password_second\",\n    validators: passwordValidators,\n  },\n};\n\nconst emailField = new InputField(FIELDS_PROPS.EMAIL, inputSettings);\nconst loginField = new InputField(FIELDS_PROPS.LOGIN, inputSettings);\nconst firstNameField = new InputField(FIELDS_PROPS.FIRST_NAME, inputSettings);\nconst secondNameField = new InputField(FIELDS_PROPS.SECOND_NAME, inputSettings);\nconst phoneField = new InputField(FIELDS_PROPS.PHONE, inputSettings);\nconst passwordField = new InputField(FIELDS_PROPS.PASSWORD, inputSettings);\nconst passwordSecondField = new InputField(\n  FIELDS_PROPS.PASSWORD_SECOND,\n  inputSettings\n);\n\nconst fields = [\n  emailField,\n  loginField,\n  firstNameField,\n  secondNameField,\n  phoneField,\n  passwordField,\n  passwordSecondField,\n];\n\nconst onSubmitHandler = (e: SubmitEvent) => {\n  e.preventDefault();\n\n  const errors = [];\n\n  const formData = fields.reduce((data, field) => {\n    field.validate();\n\n    if (field.props.errorText) {\n      errors.push({\n        name: field.props.name,\n        value: field.value,\n        error: field.props.errorText,\n      });\n    }\n\n    return {\n      ...data,\n      [`${field.props.name}`]: field.value,\n    };\n  }, {});\n\n  console.log(formData);\n};\n\nconst action = new Button({ text: \"Зарегистрироваться\", type: \"submit\" });\nconst link = new Button(\n  { text: \"Войти\", href: \"/login\" },\n  { className: \"auth__link\" }\n);\n\nconst props: AuthPageProps = {\n  name: \"Регистрация\",\n  fields,\n  action,\n  link,\n  events: {\n    submit: onSubmitHandler,\n  },\n};\n\nconst loginPage = new AuthPage(props);\n\nrender(\".app\", loginPage);\n"],"names":["$7dbfb48377d9a293$var$firstLetterCapitalReg","$7dbfb48377d9a293$var$nameReg","$7dbfb48377d9a293$var$loginReg","$7dbfb48377d9a293$var$hasNumberReg","$7dbfb48377d9a293$var$hasCapitalLetterReg","$7dbfb48377d9a293$var$emailReg","$7dbfb48377d9a293$var$phoneReg","$7dbfb48377d9a293$export$2e85a6f149681784","value","$7dbfb48377d9a293$export$c7a5279b16a95001","length","$7dbfb48377d9a293$export$d2a61dd0778cccb","$7dbfb48377d9a293$export$b61a110fad42fdf1","test","$7dbfb48377d9a293$export$db2abba01c194d75","charAt","$7dbfb48377d9a293$export$34d7ff9cf9c49438","hasNumber","hasCapitalLetter","$9196f602585983b8$var$inputSettings","withInternalID","$9196f602585983b8$var$FIELDS_PROPS","EMAIL","type","label","name","validators","LOGIN","FIRST_NAME","SECOND_NAME","PHONE","PASSWORD","PASSWORD_SECOND","$9196f602585983b8$var$fields","$2Cyn4","default","$9196f602585983b8$var$action","$br1GR","text","$9196f602585983b8$var$link","href","className","$9196f602585983b8$var$props","events","submit","e","preventDefault","errors","formData","reduce","data","field","validate","props","errorText","push","error","console","log","$9196f602585983b8$var$loginPage","$fp2Ul","$9se8b"],"version":3,"file":"SIgnIn.e6213150.js.map"}