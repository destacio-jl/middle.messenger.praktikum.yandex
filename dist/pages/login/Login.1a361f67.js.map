{"mappings":"4hBAEA,MAEMA,EAAQ,4BACRC,EAAY,YACZC,EAAmB,eAEnBC,EAAQ,eAEDC,EAA+BC,GAC1CA,EAAQ,KAAO,kCAcJC,EACVC,GACAF,IACkBA,GAASA,EAAME,QAAUA,EAGtC,KAAI,+CACHA,IAGIC,EACVD,GACAF,IACkBA,GAASA,EAAME,QAAUA,EAGtC,KAAI,gDACHA,IAoCIE,EAAkB,CAC7BL,EACAE,EAAkB,GAClBE,EAAkB,IApC2BH,IAC5BA,GAASL,EAASU,KAAKL,GAGpC,KACA,gFAyCOM,EAAqB,CAChCP,EACAE,EAAkB,GAClBE,EAAkB,IAzC8BH,IAChD,MAAMO,EAAYX,EAAaS,KAAKL,GAC9BQ,EAAmBX,EAAoBQ,KAAKL,GAElD,OAAIA,IAAUO,EAAkB,2CAC5BP,IAAUQ,EACL,qDAEF,OCvDHC,GDgGJR,EAAkB,IAClBE,EAAkB,ICjGE,CACpBO,gBAAgB,IAGZC,EAAe,CACnBC,MAAO,CACLC,KAAM,OACNC,MAAO,QACFC,KAAC,QACNC,WAAYZ,GAEda,SAAU,CACRJ,KAAM,WACNC,MAAO,SACDC,KAAA,WACNC,WAAYV,IAOVY,EAAS,CAHI,IAAIC,EAAAC,QAAWT,EAAaC,MAAOH,GAChC,IAAIU,EAAAC,QAAWT,EAAaM,SAAUR,IAItDY,EAAS,IAAIC,EAAAF,QAAO,CAAEG,KAAM,iBAAgCV,KAAM,WA2BlEW,EAAuB,CAC3BT,KAAM,cACNG,SACAG,EACAI,OAAQ,CACNC,OA9BqBC,IACvBA,EAAEC,iBAEF,MAAMC,EAAS,GAETC,EAAWZ,EAAOa,QAAM,CAAEC,EAAMC,KACpCA,EAAMC,WAEFD,EAAME,MAAMC,WACdP,EAAOQ,KAAK,CACVtB,KAAMkB,EAAME,MAAMpB,KAClBf,MAAOiC,EAAMjC,MACbsC,MAAOL,EAAME,MAAMC,YAIhB,IACFJ,MACCC,EAAME,MAAMpB,QAASkB,EAAMjC,SAEhC,IAEHuC,QAAQC,IAAIV,MAYRW,EAAY,IAAIC,EAAAtB,QAASI,GAE/BmB,EAAAvB,QAAO,OAAQqB","sources":["src/utils/validators.ts","src/pages/Login/Login.ts"],"sourcesContent":["export type Validator = (value: string) => string | null;\n\nconst firstLetterCapitalReg = /[А-ЯA-Z]/;\nconst nameReg = /^[а-яА-Яa-zA-Z-]+$/;\nconst loginReg = /(?!^\\d+$)^[a-zA-Z\\d\\-_]+$/;\nconst hasNumberReg = /.*[0-9].*/;\nconst hasCapitalLetterReg = /.*[А-ЯA-Z].*/;\nconst emailReg = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\nconst phoneReg = /^[\\d+][\\d]+$/;\n\nexport const validateRequired: Validator = (value) =>\n  value ? null : \"Поле обязательно для заполнения\";\n\nexport const validateFirstLetterCapital: Validator = (value) => {\n  const isValid = !value || firstLetterCapitalReg.test(value.charAt(0));\n\n  return isValid ? null : \"Первая буква должна быть заглавной\";\n};\n\nexport const validateNameString: Validator = (value) => {\n  const isValid = !value || nameReg.test(value);\n\n  return isValid ? null : \"Поле может содержать буквы и дефис\";\n};\n\nexport const validateMinLength =\n  (length: number): Validator =>\n  (value) => {\n    const isValid = !value || value.length >= length;\n\n    return isValid\n      ? null\n      : `Кол-во символов должно быть по меньшей мере ${length}`;\n  };\n\nexport const validateMaxLength =\n  (length: number): Validator =>\n  (value) => {\n    const isValid = !value || value.length <= length;\n\n    return isValid\n      ? null\n      : `Кол-во символов должно быть меньше или равно ${length}`;\n  };\n\nexport const validateLoginString: Validator = (value) => {\n  const isValid = !value || loginReg.test(value);\n\n  return isValid\n    ? null\n    : \"Поле может содержать буквы латинского алфавита, дефис и нижнее подчеркивание\";\n};\n\nexport const validatePasswordString: Validator = (value) => {\n  const hasNumber = hasNumberReg.test(value);\n  const hasCapitalLetter = hasCapitalLetterReg.test(value);\n\n  if (value && !hasNumber) return \"Поле должно содержать хотя бы одну цифру\";\n  if (value && !hasCapitalLetter)\n    return \"Поле должно содержать хотя бы одну заглавную букву\";\n\n  return null;\n};\n\nexport const validateEmail: Validator = (value) => {\n  const isValid = !value || emailReg.test(value);\n\n  return isValid ? null : \"Введите имейл в формате common@mail.com\";\n};\n\nexport const validatePhoneString: Validator = (value) => {\n  const isValid = !value || phoneReg.test(value);\n\n  return isValid\n    ? null\n    : `Поле должно содержать только цифр, может начинаться со знака \"+\"`;\n};\n\nexport const loginValidators = [\n  validateRequired,\n  validateMinLength(3),\n  validateMaxLength(20),\n  validateLoginString,\n];\n\nexport const nameValidators = [\n  validateRequired,\n  validateFirstLetterCapital,\n  validateNameString,\n];\n\nexport const passwordValidators = [\n  validateRequired,\n  validateMinLength(8),\n  validateMaxLength(40),\n  validatePasswordString,\n];\n\nexport const emailValidators = [validateRequired, validateEmail];\n\nexport const phoneValidators = [\n  validateRequired,\n  validateMinLength(10),\n  validateMaxLength(15),\n  validatePhoneString,\n];\n","import AuthPage, { AuthPageProps } from \"../../views/AuthPage\";\nimport render from \"../../utils/render\";\nimport InputField from \"../../ui/InputField\";\nimport Button from \"../../ui/Button\";\nimport { loginValidators, passwordValidators } from \"../../utils/validators\";\n\nconst inputSettings = {\n  withInternalID: true,\n};\n\nconst FIELDS_PROPS = {\n  LOGIN: {\n    type: \"text\",\n    label: \"Логин\",\n    name: \"login\",\n    validators: loginValidators,\n  },\n  PASSWORD: {\n    type: \"password\",\n    label: \"Пароль\",\n    name: \"password\",\n    validators: passwordValidators,\n  },\n};\n\nconst loginField = new InputField(FIELDS_PROPS.LOGIN, inputSettings);\nconst passwordField = new InputField(FIELDS_PROPS.PASSWORD, inputSettings);\n\nconst fields = [loginField, passwordField];\n\nconst action = new Button({ text: \"Авторизоваться\", type: \"submit\" });\n\nconst onSubmitHandler = (e: SubmitEvent) => {\n  e.preventDefault();\n\n  const errors = [];\n\n  const formData = fields.reduce((data, field) => {\n    field.validate();\n\n    if (field.props.errorText) {\n      errors.push({\n        name: field.props.name,\n        value: field.value,\n        error: field.props.errorText,\n      });\n    }\n\n    return {\n      ...data,\n      [`${field.props.name}`]: field.value,\n    };\n  }, {});\n\n  console.log(formData);\n};\n\nconst props: AuthPageProps = {\n  name: \"Вход\",\n  fields,\n  action,\n  events: {\n    submit: onSubmitHandler,\n  },\n};\n\nconst loginPage = new AuthPage(props);\n\nrender(\".app\", loginPage);\n"],"names":["$7dbfb48377d9a293$var$loginReg","$7dbfb48377d9a293$var$hasNumberReg","$7dbfb48377d9a293$var$hasCapitalLetterReg","$7dbfb48377d9a293$var$phoneReg","$7dbfb48377d9a293$export$2e85a6f149681784","value","$7dbfb48377d9a293$export$c7a5279b16a95001","length","$7dbfb48377d9a293$export$d2a61dd0778cccb","$7dbfb48377d9a293$export$b61a110fad42fdf1","test","$7dbfb48377d9a293$export$34d7ff9cf9c49438","hasNumber","hasCapitalLetter","$7cdecdbc065c6bc7$var$inputSettings","withInternalID","$7cdecdbc065c6bc7$var$FIELDS_PROPS","LOGIN","type","label","name","validators","PASSWORD","$7cdecdbc065c6bc7$var$fields","$2Cyn4","default","$7cdecdbc065c6bc7$var$action","$br1GR","text","$7cdecdbc065c6bc7$var$props","events","submit","e","preventDefault","errors","formData","reduce","data","field","validate","props","errorText","push","error","console","log","$7cdecdbc065c6bc7$var$loginPage","$fp2Ul","$9se8b"],"version":3,"file":"Login.1a361f67.js.map"}