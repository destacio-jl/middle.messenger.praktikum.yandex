{"mappings":"+gBAEA,MAEMA,EAAQ,4BACRC,EAAY,YACZC,EAAmB,eAEnBC,EAAQ,eAEDC,EAA+BC,GAC1CA,EAAQ,KAAO,kCAcJC,EACVC,GACAF,IACkBA,GAASA,EAAME,QAAUA,EAGtC,KAAI,+CACHA,IAGIC,EACVD,GACAF,IACkBA,GAASA,EAAME,QAAUA,EAGtC,KAAI,gDACHA,IAiDIE,GAXXH,EAAkB,GAClBE,EAAkB,IAUc,CAChCJ,EACAE,EAAkB,GAClBE,EAAkB,IAzC8BH,IAChD,MAAMK,EAAYT,EAAaU,KAAKN,GAC9BO,EAAmBV,EAAoBS,KAAKN,GAElD,OAAIA,IAAUK,EAAkB,2CAC5BL,IAAUO,EACL,qDAEF,QCxDHC,GDiGJP,EAAkB,IAClBE,EAAkB,IClGE,CACpBM,gBAAgB,IAGZC,EAAUC,EAAAC,qBAAqBC,QAE/BC,EAAe,CACnBC,aAAc,CACZC,KAAM,WACNC,MAAO,gBACKC,KAAN,sBACNR,EACAS,WAAYf,GAEdgB,aAAc,CACZJ,KAAM,WACNC,MAAO,eACIC,KAAL,sBACNR,EACAS,WAAYf,GAEdiB,oBAAqB,CACnBL,KAAM,WACNC,MAAO,yBACaC,KAAd,4BACNR,EACAS,WAAYf,IAiBVkB,EAAS,CAbU,IAAIX,EAAAY,QAC3BT,EAAaC,aACbP,GAEuB,IAAIG,EAAAY,QAC3BT,EAAaM,aACbZ,GAE6B,IAAIG,EAAAY,QACjCT,EAAaO,oBACbb,IA8BIgB,EAA0B,CAC9BN,KAAI,cACJI,EACAG,UAAU,EACVC,OAAQ,CACNC,OA9BqBC,IACvBA,EAAEC,iBAEF,MAAMC,EAAS,GAETC,EAAWT,EAAOU,QAAM,CAAEC,EAAMC,KACpCA,EAAMC,WAEFD,EAAME,MAAMC,WACdP,EAAOQ,KAAK,CACVpB,KAAMgB,EAAME,MAAMlB,KAClBlB,MAAOkC,EAAMlC,MACbuC,MAAOL,EAAME,MAAMC,YAIhB,IACFJ,MACCC,EAAME,MAAMlB,QAASgB,EAAMlC,SAEhC,IAEHwC,QAAQC,IAAIV,MAYRW,EAAqB,IAAIC,EAAApB,QAAYC,GAE3CoB,EAAArB,QAAO,OAAQmB","sources":["src/utils/validators.ts","src/pages/ChangePassword/ChangePassword.ts"],"sourcesContent":["export type Validator = (value: string) => string | null;\n\nconst firstLetterCapitalReg = /[А-ЯA-Z]/;\nconst nameReg = /^[а-яА-Яa-zA-Z-]+$/;\nconst loginReg = /(?!^\\d+$)^[a-zA-Z\\d\\-_]+$/;\nconst hasNumberReg = /.*[0-9].*/;\nconst hasCapitalLetterReg = /.*[А-ЯA-Z].*/;\nconst emailReg = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\nconst phoneReg = /^[\\d+][\\d]+$/;\n\nexport const validateRequired: Validator = (value) =>\n  value ? null : \"Поле обязательно для заполнения\";\n\nexport const validateFirstLetterCapital: Validator = (value) => {\n  const isValid = !value || firstLetterCapitalReg.test(value.charAt(0));\n\n  return isValid ? null : \"Первая буква должна быть заглавной\";\n};\n\nexport const validateNameString: Validator = (value) => {\n  const isValid = !value || nameReg.test(value);\n\n  return isValid ? null : \"Поле может содержать буквы и дефис\";\n};\n\nexport const validateMinLength =\n  (length: number): Validator =>\n  (value) => {\n    const isValid = !value || value.length >= length;\n\n    return isValid\n      ? null\n      : `Кол-во символов должно быть по меньшей мере ${length}`;\n  };\n\nexport const validateMaxLength =\n  (length: number): Validator =>\n  (value) => {\n    const isValid = !value || value.length <= length;\n\n    return isValid\n      ? null\n      : `Кол-во символов должно быть меньше или равно ${length}`;\n  };\n\nexport const validateLoginString: Validator = (value) => {\n  const isValid = !value || loginReg.test(value);\n\n  return isValid\n    ? null\n    : \"Поле может содержать буквы латинского алфавита, дефис и нижнее подчеркивание\";\n};\n\nexport const validatePasswordString: Validator = (value) => {\n  const hasNumber = hasNumberReg.test(value);\n  const hasCapitalLetter = hasCapitalLetterReg.test(value);\n\n  if (value && !hasNumber) return \"Поле должно содержать хотя бы одну цифру\";\n  if (value && !hasCapitalLetter)\n    return \"Поле должно содержать хотя бы одну заглавную букву\";\n\n  return null;\n};\n\nexport const validateEmail: Validator = (value) => {\n  const isValid = !value || emailReg.test(value);\n\n  return isValid ? null : \"Введите имейл в формате common@mail.com\";\n};\n\nexport const validatePhoneString: Validator = (value) => {\n  const isValid = !value || phoneReg.test(value);\n\n  return isValid\n    ? null\n    : `Поле должно содержать только цифр, может начинаться со знака \"+\"`;\n};\n\nexport const loginValidators = [\n  validateRequired,\n  validateMinLength(3),\n  validateMaxLength(20),\n  validateLoginString,\n];\n\nexport const nameValidators = [\n  validateRequired,\n  validateFirstLetterCapital,\n  validateNameString,\n];\n\nexport const passwordValidators = [\n  validateRequired,\n  validateMinLength(8),\n  validateMaxLength(40),\n  validatePasswordString,\n];\n\nexport const emailValidators = [validateRequired, validateEmail];\n\nexport const phoneValidators = [\n  validateRequired,\n  validateMinLength(10),\n  validateMaxLength(15),\n  validatePhoneString,\n];\n","import ProfilePage, { ProfilePageProps } from \"../../views/ProfilePage\";\nimport render from \"../../utils/render\";\nimport InputField, { INPUT_FIELD_VARIANTS } from \"../../ui/InputField\";\nimport { passwordValidators } from \"../../utils/validators\";\n\nconst inputSettings = {\n  withInternalID: true,\n};\n\nconst variant = INPUT_FIELD_VARIANTS.PROFILE;\n\nconst FIELDS_PROPS = {\n  OLD_PASSWORD: {\n    type: \"password\",\n    label: \"Старый пароль\",\n    name: \"oldPassword\",\n    variant,\n    validators: passwordValidators,\n  },\n  NEW_PASSWORD: {\n    type: \"password\",\n    label: \"Новый пароль\",\n    name: \"newPassword\",\n    variant,\n    validators: passwordValidators,\n  },\n  NEW_PASSWORD_REPEAT: {\n    type: \"password\",\n    label: \"Повторите новый пароль\",\n    name: \"newPasswordRepeat\",\n    variant,\n    validators: passwordValidators,\n  },\n};\n\nconst oldPasswordField = new InputField(\n  FIELDS_PROPS.OLD_PASSWORD,\n  inputSettings\n);\nconst newPasswordField = new InputField(\n  FIELDS_PROPS.NEW_PASSWORD,\n  inputSettings\n);\nconst newPasswordRepeatField = new InputField(\n  FIELDS_PROPS.NEW_PASSWORD_REPEAT,\n  inputSettings\n);\n\nconst fields = [oldPasswordField, newPasswordField, newPasswordRepeatField];\n\nconst onSubmitHandler = (e: SubmitEvent) => {\n  e.preventDefault();\n\n  const errors = [];\n\n  const formData = fields.reduce((data, field) => {\n    field.validate();\n\n    if (field.props.errorText) {\n      errors.push({\n        name: field.props.name,\n        value: field.value,\n        error: field.props.errorText,\n      });\n    }\n\n    return {\n      ...data,\n      [`${field.props.name}`]: field.value,\n    };\n  }, {});\n\n  console.log(formData);\n};\n\nconst props: ProfilePageProps = {\n  name: `Иван`,\n  fields,\n  editable: true,\n  events: {\n    submit: onSubmitHandler,\n  },\n};\n\nconst changePasswordPage = new ProfilePage(props);\n\nrender(\".app\", changePasswordPage);\n"],"names":["$7dbfb48377d9a293$var$loginReg","$7dbfb48377d9a293$var$hasNumberReg","$7dbfb48377d9a293$var$hasCapitalLetterReg","$7dbfb48377d9a293$var$phoneReg","$7dbfb48377d9a293$export$2e85a6f149681784","value","$7dbfb48377d9a293$export$c7a5279b16a95001","length","$7dbfb48377d9a293$export$d2a61dd0778cccb","$7dbfb48377d9a293$export$34d7ff9cf9c49438","hasNumber","test","hasCapitalLetter","$d395a0104547de3b$var$inputSettings","withInternalID","$d395a0104547de3b$var$variant","$2Cyn4","INPUT_FIELD_VARIANTS","PROFILE","$d395a0104547de3b$var$FIELDS_PROPS","OLD_PASSWORD","type","label","name","validators","NEW_PASSWORD","NEW_PASSWORD_REPEAT","$d395a0104547de3b$var$fields","default","$d395a0104547de3b$var$props","editable","events","submit","e","preventDefault","errors","formData","reduce","data","field","validate","props","errorText","push","error","console","log","$d395a0104547de3b$var$changePasswordPage","$11D1r","$9se8b"],"version":3,"file":"ChangePassword.6dae8e40.js.map"}