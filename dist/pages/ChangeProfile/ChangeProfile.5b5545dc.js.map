{"mappings":"yfAQAA,EANY,CAAIC,EAAeC,KAC7B,MAAMC,EAAOC,SAASC,cAAcJ,GAEpC,OADAE,EAAKG,YAAYJ,EAAMK,cAChBJ,gBCHT,MAAMK,EAAqB,WACrBC,EAAO,qBACPC,EAAQ,4BACRC,EAAY,YACZC,EAAmB,eACnBC,EAAQ,kDACRC,EAAQ,eAEDC,EAA+BC,GAC1CA,EAAQ,KAAO,kCAcJC,EACVC,GACAF,IACkBA,GAASA,EAAME,QAAUA,EAGtC,KAAI,+CACHA,IAGIC,EACVD,GACAF,IACkBA,GAASA,EAAME,QAAUA,EAGtC,KAAI,gDACHA,IAoCIE,EAAkB,CAC7BL,EACAE,EAAkB,GAClBE,EAAkB,IApC2BH,IAC5BA,GAASN,EAASW,KAAKL,GAGpC,KACA,gFAmCOM,EAAiB,CAC5BP,EAzEoDC,IACnCA,GAASR,EAAsBa,KAAKL,EAAMO,OAAO,IAEjD,KAAO,qCAGoBP,IAC3BA,GAASP,EAAQY,KAAKL,GAEtB,KAAO,sCA4EbQ,GALXP,EAAkB,GAClBE,EAAkB,IAIW,CAACJ,EAlCSC,IACtBA,GAASH,EAASQ,KAAKL,GAEvB,KAAO,4CAiCbS,EAAkB,CAC7BV,EACAE,EAAkB,IAClBE,EAAkB,IAjC2BH,IAC5BA,GAASF,EAASO,KAAKL,GAGpC,KAAI,oEChEJU,EAAgB,CACpBC,gBAAgB,GAGZC,EAAUC,EAAAC,qBAAqBC,QAE/BC,EAAe,CACnBC,MAAO,CACLC,KAAM,QACNC,MAAO,QACFC,KAAC,QACNpB,MAAO,2BACPY,EACAS,WAAYb,GAEdc,MAAO,CACLJ,KAAM,OACNC,MAAO,QACFC,KAAC,QACNpB,MAAO,qBACPY,EACAS,WAAYjB,GAEdmB,WAAY,CACVL,KAAM,OACNC,MAAO,MACJC,KAAG,aACNpB,MAAO,eACHY,EACJS,WAAYf,GAEdkB,YAAa,CACXN,KAAM,OACNC,MAAO,UACAC,KAAD,cACNpB,MAAO,iBACDY,EACNS,WAAYf,GAEdmB,aAAc,CACZP,KAAM,OACNC,MAAO,aACCC,KAAF,eACNpB,MAAO,eACHY,EACJS,WAAYf,GAEdoB,MAAO,CACLR,KAAM,OACNC,MAAO,UACAC,KAAD,QACNpB,MAAO,uBACPY,EACAS,WAAYZ,IAWVkB,EAAS,CAPI,IAAId,EAAAe,QAAWZ,EAAaC,MAAOP,GACnC,IAAIG,EAAAe,QAAWZ,EAAaM,MAAOZ,GAC/B,IAAIG,EAAAe,QAAWZ,EAAaO,WAAYb,GAC5C,IAAIG,EAAAe,QAAWZ,EAAaQ,YAAad,GACxC,IAAIG,EAAAe,QAAWZ,EAAaS,aAAcf,GAC5C,IAAIG,EAAAe,QAAWZ,EAAaU,MAAOhB,IAoC/CmB,EAA0B,CAC9BT,KAAI,cACJO,EACAG,UAAU,EACVC,OAAQ,CACNC,OA9BqBC,IACvBA,EAAEC,iBAEF,MAAMC,EAAS,GAETC,EAAWT,EAAOU,QAAM,CAAEC,EAAMC,KACpCA,EAAMC,WAEFD,EAAME,MAAMC,WACdP,EAAOQ,KAAK,CACVvB,KAAMmB,EAAME,MAAMrB,KAClBpB,MAAOuC,EAAMvC,MACb4C,MAAOL,EAAME,MAAMC,YAIhB,IACFJ,MACCC,EAAME,MAAMrB,QAASmB,EAAMvC,SAEhC,IAEH6C,QAAQC,IAAIV,MAcdpD,EAAO,OAFW,IAAI+D,EAAAnB,QAAYC","sources":["src/utils/render.ts","src/utils/validators.ts","src/pages/ChangeProfile/ChangeProfile.ts"],"sourcesContent":["import { IBlock } from \"../core/Block\";\n\nconst render = (query: string, block: IBlock) => {\n  const root = document.querySelector(query);\n  root.appendChild(block.getContent());\n  return root;\n};\n\nexport default render;\n","export type Validator = (value: string) => string | null;\n\nconst firstLetterCapitalReg = /[А-ЯA-Z]/;\nconst nameReg = /^[а-яА-Яa-zA-Z-]+$/;\nconst loginReg = /(?!^\\d+$)^[a-zA-Z\\d\\-_]+$/;\nconst hasNumberReg = /.*[0-9].*/;\nconst hasCapitalLetterReg = /.*[А-ЯA-Z].*/;\nconst emailReg = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\nconst phoneReg = /^[\\d+][\\d]+$/;\n\nexport const validateRequired: Validator = (value) =>\n  value ? null : \"Поле обязательно для заполнения\";\n\nexport const validateFirstLetterCapital: Validator = (value) => {\n  const isValid = !value || firstLetterCapitalReg.test(value.charAt(0));\n\n  return isValid ? null : \"Первая буква должна быть заглавной\";\n};\n\nexport const validateNameString: Validator = (value) => {\n  const isValid = !value || nameReg.test(value);\n\n  return isValid ? null : \"Поле может содержать буквы и дефис\";\n};\n\nexport const validateMinLength =\n  (length: number): Validator =>\n  (value) => {\n    const isValid = !value || value.length >= length;\n\n    return isValid\n      ? null\n      : `Кол-во символов должно быть по меньшей мере ${length}`;\n  };\n\nexport const validateMaxLength =\n  (length: number): Validator =>\n  (value) => {\n    const isValid = !value || value.length <= length;\n\n    return isValid\n      ? null\n      : `Кол-во символов должно быть меньше или равно ${length}`;\n  };\n\nexport const validateLoginString: Validator = (value) => {\n  const isValid = !value || loginReg.test(value);\n\n  return isValid\n    ? null\n    : \"Поле может содержать буквы латинского алфавита, дефис и нижнее подчеркивание\";\n};\n\nexport const validatePasswordString: Validator = (value) => {\n  const hasNumber = hasNumberReg.test(value);\n  const hasCapitalLetter = hasCapitalLetterReg.test(value);\n\n  if (value && !hasNumber) return \"Поле должно содержать хотя бы одну цифру\";\n  if (value && !hasCapitalLetter)\n    return \"Поле должно содержать хотя бы одну заглавную букву\";\n\n  return null;\n};\n\nexport const validateEmail: Validator = (value) => {\n  const isValid = !value || emailReg.test(value);\n\n  return isValid ? null : \"Введите имейл в формате common@mail.com\";\n};\n\nexport const validatePhoneString: Validator = (value) => {\n  const isValid = !value || phoneReg.test(value);\n\n  return isValid\n    ? null\n    : `Поле должно содержать только цифр, может начинаться со знака \"+\"`;\n};\n\nexport const loginValidators = [\n  validateRequired,\n  validateMinLength(3),\n  validateMaxLength(20),\n  validateLoginString,\n];\n\nexport const nameValidators = [\n  validateRequired,\n  validateFirstLetterCapital,\n  validateNameString,\n];\n\nexport const passwordValidators = [\n  validateRequired,\n  validateMinLength(8),\n  validateMaxLength(40),\n  validatePasswordString,\n];\n\nexport const emailValidators = [validateRequired, validateEmail];\n\nexport const phoneValidators = [\n  validateRequired,\n  validateMinLength(10),\n  validateMaxLength(15),\n  validatePhoneString,\n];\n","import ProfilePage, { ProfilePageProps } from \"../../views/ProfilePage\";\nimport render from \"../../utils/render\";\nimport InputField, { INPUT_FIELD_VARIANTS } from \"../../ui/InputField\";\nimport {\n  emailValidators,\n  loginValidators,\n  nameValidators,\n  phoneValidators,\n} from \"../../utils/validators\";\n\nconst inputSettings = {\n  withInternalID: true,\n};\n\nconst variant = INPUT_FIELD_VARIANTS.PROFILE;\n\nconst FIELDS_PROPS = {\n  EMAIL: {\n    type: \"email\",\n    label: \"Почта\",\n    name: \"email\",\n    value: \"pochta@yandex.ru\",\n    variant,\n    validators: emailValidators,\n  },\n  LOGIN: {\n    type: \"text\",\n    label: \"Логин\",\n    name: \"login\",\n    value: \"ivanivanov\",\n    variant,\n    validators: loginValidators,\n  },\n  FIRST_NAME: {\n    type: \"text\",\n    label: \"Имя\",\n    name: \"first_name\",\n    value: \"Иван\",\n    variant,\n    validators: nameValidators,\n  },\n  SECOND_NAME: {\n    type: \"text\",\n    label: \"Фамилия\",\n    name: \"second_name\",\n    value: \"Иванов\",\n    variant,\n    validators: nameValidators,\n  },\n  DISPLAY_NAME: {\n    type: \"text\",\n    label: \"Имя в чате\",\n    name: \"display_name\",\n    value: \"Иван\",\n    variant,\n    validators: nameValidators,\n  },\n  PHONE: {\n    type: \"text\",\n    label: \"Телефон\",\n    name: \"phone\",\n    value: \"+79099673030\",\n    variant,\n    validators: phoneValidators,\n  },\n};\n\nconst emailField = new InputField(FIELDS_PROPS.EMAIL, inputSettings);\nconst loginField = new InputField(FIELDS_PROPS.LOGIN, inputSettings);\nconst firstNameField = new InputField(FIELDS_PROPS.FIRST_NAME, inputSettings);\nconst secondName = new InputField(FIELDS_PROPS.SECOND_NAME, inputSettings);\nconst displayName = new InputField(FIELDS_PROPS.DISPLAY_NAME, inputSettings);\nconst phoneName = new InputField(FIELDS_PROPS.PHONE, inputSettings);\n\nconst fields = [\n  emailField,\n  loginField,\n  firstNameField,\n  secondName,\n  displayName,\n  phoneName,\n];\n\nconst onSubmitHandler = (e: SubmitEvent) => {\n  e.preventDefault();\n\n  const errors = [];\n\n  const formData = fields.reduce((data, field) => {\n    field.validate();\n\n    if (field.props.errorText) {\n      errors.push({\n        name: field.props.name,\n        value: field.value,\n        error: field.props.errorText,\n      });\n    }\n\n    return {\n      ...data,\n      [`${field.props.name}`]: field.value,\n    };\n  }, {});\n\n  console.log(formData);\n};\n\nconst props: ProfilePageProps = {\n  name: `Иван`,\n  fields,\n  editable: true,\n  events: {\n    submit: onSubmitHandler,\n  },\n};\n\nconst loginPage = new ProfilePage(props);\n\nrender(\".app\", loginPage);\n"],"names":["$46ef1d3c333dc1b3$export$2e2bcd8739ae039","query","block","root","document","querySelector","appendChild","getContent","$7dbfb48377d9a293$var$firstLetterCapitalReg","$7dbfb48377d9a293$var$nameReg","$7dbfb48377d9a293$var$loginReg","$7dbfb48377d9a293$var$hasNumberReg","$7dbfb48377d9a293$var$hasCapitalLetterReg","$7dbfb48377d9a293$var$emailReg","$7dbfb48377d9a293$var$phoneReg","$7dbfb48377d9a293$export$2e85a6f149681784","value","$7dbfb48377d9a293$export$c7a5279b16a95001","length","$7dbfb48377d9a293$export$d2a61dd0778cccb","$7dbfb48377d9a293$export$b61a110fad42fdf1","test","$7dbfb48377d9a293$export$db2abba01c194d75","charAt","$7dbfb48377d9a293$export$cd4130bd8b3858e","$7dbfb48377d9a293$export$48af3c5b77feae68","$5240921b62c32df1$var$inputSettings","withInternalID","$5240921b62c32df1$var$variant","$2Cyn4","INPUT_FIELD_VARIANTS","PROFILE","$5240921b62c32df1$var$FIELDS_PROPS","EMAIL","type","label","name","validators","LOGIN","FIRST_NAME","SECOND_NAME","DISPLAY_NAME","PHONE","$5240921b62c32df1$var$fields","default","$5240921b62c32df1$var$props","editable","events","submit","e","preventDefault","errors","formData","reduce","data","field","validate","props","errorText","push","error","console","log","$11D1r"],"version":3,"file":"ChangeProfile.5b5545dc.js.map"}